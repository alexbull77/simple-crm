// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model Post {
    id        Int      @id @default(autoincrement())
    name      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    createdBy   User   @relation(fields: [createdById], references: [id])
    createdById String

    @@index([name])
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    posts         Post[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Customer {
    CustomerID  String    @id @default(cuid())
    FirstName   String?
    LastName    String?
    Email       String?
    PhoneNumber BigInt?
    Address     String?
    Contact     Contact[]
    Sales       Sales[]
}

model Contact {
    ContactID          String        @id @default(cuid())
    CustomerID         String
    ContactDate        DateTime      @default(now())
    CustomerCustomerID Customer      @relation(fields: [CustomerID], references: [CustomerID], onDelete: Cascade)
    ContactMethod      ContactMethod
    Notes              String
}

model Products {
    ProductID          String  @id @default(cuid())
    ProductName        String
    ProductDescription String
    Price              Int
    Sales              Sales[]
}

model Sales {
    SaleID String @id @default(cuid())

    SaleCustomerID Customer @relation(fields: [CustomerID], onDelete: Cascade, references: [CustomerID])
    CustomerID     String

    SaleProductID Products @relation(fields: [ProductID], onDelete: Cascade, references: [ProductID])
    ProductID     String

    DateOfSale DateTime @default(now())
    Amount     Float
}

model Employees {
    EmployeeID String  @id @default(cuid())
    FirstName  String?
    LastName   String?
    Role       Role
    Email      String
}

enum Role {
    USER
    ADMIN
}

enum ContactMethod {
    EMAIL
    PHONE
    SMS
    WHATSAPP
    SOCIAL_MEDIA
}
